---

name: Acceptance tests
on:
  pull_request:
    branches: [main]
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

concurrency:
  group: "acceptance-${{ github.event.repository.name }}"

jobs:
  init-env:
    name: Init environment
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: fetch IaC sources
        uses: actions/checkout@v3
        with:
          repository: ahova/terragrunt
          ssh-key: ${{ secrets.PRIVATE_KEY }}
          path: terragrunt
      - uses: ./.github/actions/iac-toolset
        with:
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: prepare test env
        run: make kops apps
        working-directory: terragrunt
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  test:
    name: Test
    runs-on: self-hosted
    needs:
      - init-env
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: prepare golang
        uses: actions/setup-go@v3
        with:
          go-version: 'stable'
          check-latest: true
      - name: gather kubeconfig
        id: kubeconfig
        run: |
          echo "KUBE_CONFIG<<EOF" >> $GITHUB_ENV
          cat "$HOME/.kube/config" | base64 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: prepare kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ env.KUBE_CONFIG }}
      - uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
      - name: deploy app to cluster
        run: make deploy
        env:
          IMG_BASE: >-
            478845996840.dkr.ecr.eu-central-1.amazonaws.com/wireguard-operator
          TAG: "${{ steps.get-latest-tag.outputs.tag }}"
      - name: sanity checks
        run: |
          kubectl get pod --namespace=wireguard-operator
          kubectl get pod --namespace=default
          kubectl get service -o wide --namespace=default
          kubectl get node
      - name: run smoke tests
        run: make smoke

  cleanup:
    name: Cleanup environment
    runs-on: self-hosted
    needs:
      - test
    if: always()
    steps:
      - uses: actions/checkout@v3
      - name: fetch IaC sources
        uses: actions/checkout@v3
        with:
          repository: ahova/terragrunt
          ssh-key: ${{ secrets.PRIVATE_KEY }}
          path: terragrunt
      - uses: ./.github/actions/iac-toolset
        with:
          private_key: ${{ secrets.PRIVATE_KEY }}
      - name: teardown test env
        run: make -ik destroy-apps destroy-kops
        working-directory: terragrunt
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
      - uses: thollander/actions-comment-pull-request@v2
        with:
          message: "/fast-forward"
          GITHUB_TOKEN: "${{ secrets.REPO_TOKEN }}"

  close-issue:
    name: Close issue
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
      - name: Parse issue from commit message
        id: parsed
        run: |
          issue=$(echo $COMMIT_MESSAGE | sed -n 's/.*#\([0-9]*\).*/\1/p')
          echo "issue_number=$issue" >> $GITHUB_OUTPUT
        env:
          COMMIT_MESSAGE: "${{ github.event.head_commit.message }}"
      - name: Close Issue
        if: steps.parsed.outputs.issue_number != ''
        uses: peter-evans/close-issue@v2
        with:
          issue-number: ${{ steps.parsed.outputs.issue_number }}
          comment: >-
            Auto-closing issue at
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
